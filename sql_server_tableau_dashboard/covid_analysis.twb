<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20231.23.0511.1508                               -->
<workbook original-version='18.1' source-build='2023.1.2 (20231.23.0511.1508)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <_.fcp.LayerControlWidget.true...LayerControlWidget />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Sheet1 (table_2)' inline='true' name='federated.0o3klim1et1erg10vcb261gvdnjl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='table_2' name='excel-direct.0h9tpnr1o7zq3f1dp36690a48iaw'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Hp Probook/Desktop/tablue_alx/table_2.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0h9tpnr1o7zq3f1dp36690a48iaw' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='TotalDeathCount' ordinal='1' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0h9tpnr1o7zq3f1dp36690a48iaw' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='TotalDeathCount' ordinal='1' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B7:no:A1:B7:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_F136764BFC284CB8A79366A46E4ED0C9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalDeathCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalDeathCount]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>TotalDeathCount</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_F136764BFC284CB8A79366A46E4ED0C9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Total Death Count' datatype='integer' name='[TotalDeathCount]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_F136764BFC284CB8A79366A46E4ED0C9]' role='measure' type='quantitative' />
      <column caption='Continent' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp Probook/Desktop/tablue_alx/Sheet1 (table_2).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='06/08/2023 01:03:32 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Sheet1 (table_2)' increment-value='%null%' refresh-type='create' rows-inserted='6' timestamp-start='2023-06-08 13:03:31.749' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>0</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>TotalDeathCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[TotalDeathCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>TotalDeathCount</remote-alias>
              <ordinal>1</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' palette='green_10_0' type='palette'>
            <map to='#24693d'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#2f8243'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#4e9a51'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#6ab25f'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#87cc79'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b3e0a6'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_F136764BFC284CB8A79366A46E4ED0C9'>
            <properties context=''>
              <relation connection='excel-direct.0h9tpnr1o7zq3f1dp36690a48iaw' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='integer' name='TotalDeathCount' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Sheet1 (table_3)' inline='true' name='federated.0svxgyc133zngs1bktrfo18xshq2' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='table_3' name='excel-direct.16hi0qk0pq5guk1ehz5nk0y5b9wm'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Hp Probook/Desktop/tablue_alx/table_3.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.16hi0qk0pq5guk1ehz5nk0y5b9wm' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:D220:no:A1:D220:0' header='yes' outcome='6'>
            <column datatype='string' name='Location' ordinal='0' />
            <column datatype='integer' name='Population' ordinal='1' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='2' />
            <column datatype='real' name='PercentPopulationInfected' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.16hi0qk0pq5guk1ehz5nk0y5b9wm' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:D220:no:A1:D220:0' header='yes' outcome='6'>
            <column datatype='string' name='Location' ordinal='0' />
            <column datatype='integer' name='Population' ordinal='1' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='2' />
            <column datatype='real' name='PercentPopulationInfected' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D220:no:A1:D220:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9252203643444541B0E6B46EAFAD5407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9252203643444541B0E6B46EAFAD5407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9252203643444541B0E6B46EAFAD5407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPopulationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPopulationInfected]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>PercentPopulationInfected</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9252203643444541B0E6B46EAFAD5407]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Highest Infection Count' datatype='integer' name='[HighestInfectionCount]' role='measure' type='quantitative' />
      <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Percent Population Infected' datatype='real' name='[PercentPopulationInfected]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_9252203643444541B0E6B46EAFAD5407]' role='measure' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp Probook/Desktop/tablue_alx/Sheet1 (table_3).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='06/08/2023 01:03:46 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Sheet1 (table_3)' increment-value='%null%' refresh-type='create' rows-inserted='219' timestamp-start='2023-06-08 13:03:46.226' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Location</remote-alias>
              <ordinal>0</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>219</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Population</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population</remote-alias>
              <ordinal>1</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>218</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>HighestInfectionCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[HighestInfectionCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>HighestInfectionCount</remote-alias>
              <ordinal>2</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>199</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>PercentPopulationInfected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[PercentPopulationInfected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>PercentPopulationInfected</remote-alias>
              <ordinal>3</ordinal>
              <family>Sheet1</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>199</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_9252203643444541B0E6B46EAFAD5407'>
            <properties context=''>
              <relation connection='excel-direct.16hi0qk0pq5guk1ehz5nk0y5b9wm' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:D220:no:A1:D220:0' header='yes' outcome='6'>
                  <column datatype='string' name='Location' ordinal='0' />
                  <column datatype='integer' name='Population' ordinal='1' />
                  <column datatype='integer' name='HighestInfectionCount' ordinal='2' />
                  <column datatype='real' name='PercentPopulationInfected' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Sheet1 (table_4)' inline='true' name='federated.152a0fa027hnju1112rxp0w03cpj' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='table_4' name='excel-direct.1yyknlw1smu4lq1cetebz1r8unnw'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Hp Probook/Desktop/tablue_alx/table_4.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1yyknlw1smu4lq1cetebz1r8unnw' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
            <column datatype='string' name='Location' ordinal='0' />
            <column datatype='integer' name='Population' ordinal='1' />
            <column datatype='date' name='date' ordinal='2' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
            <column datatype='real' name='PercentPopulationInfected' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1yyknlw1smu4lq1cetebz1r8unnw' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
            <column datatype='string' name='Location' ordinal='0' />
            <column datatype='integer' name='Population' ordinal='1' />
            <column datatype='date' name='date' ordinal='2' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
            <column datatype='real' name='PercentPopulationInfected' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E10001:no:A1:E10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Location]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPopulationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPopulationInfected]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>PercentPopulationInfected</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Highest Infection Count' datatype='integer' name='[HighestInfectionCount]' role='measure' type='quantitative' />
      <column datatype='string' name='[Location]' role='dimension' type='nominal' />
      <column caption='Percent Population Infected' datatype='real' name='[PercentPopulationInfected]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F]' role='measure' type='quantitative' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column-instance column='[Location]' derivation='Attribute' name='[attr:Location:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp Probook/Desktop/tablue_alx/Sheet1 (table_4).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='06/08/2023 01:04:55 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Sheet1 (table_4)' increment-value='%null%' refresh-type='create' rows-inserted='85171' timestamp-start='2023-06-08 13:04:43.753' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Location]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Location</remote-alias>
              <ordinal>0</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>307</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Population</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Population]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Population</remote-alias>
              <ordinal>1</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>298</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>2</ordinal>
              <family>Sheet1</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1206</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>HighestInfectionCount</remote-name>
              <remote-type>20</remote-type>
              <local-name>[HighestInfectionCount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>HighestInfectionCount</remote-alias>
              <ordinal>3</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>18618</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>PercentPopulationInfected</remote-name>
              <remote-type>5</remote-type>
              <local-name>[PercentPopulationInfected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>PercentPopulationInfected</remote-alias>
              <ordinal>4</ordinal>
              <family>Sheet1</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>28901</approx-count>
              <contains-null>true</contains-null>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:Location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_0E31CD2075584CDD9F4C826ED8B6A17F'>
            <properties context=''>
              <relation connection='excel-direct.1yyknlw1smu4lq1cetebz1r8unnw' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
                  <column datatype='string' name='Location' ordinal='0' />
                  <column datatype='integer' name='Population' ordinal='1' />
                  <column datatype='date' name='date' ordinal='2' />
                  <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
                  <column datatype='real' name='PercentPopulationInfected' ordinal='4' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Sheet1 (table_1)' inline='true' name='federated.1onks5i1pmfy8x10hpq9h0noya9j' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='table_1' name='excel-direct.002yqzz13sq85o17a3wcr03ubzw0'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Hp Probook/Desktop/tablue_alx/table_1.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.002yqzz13sq85o17a3wcr03ubzw0' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
            <column datatype='integer' name='total_cases' ordinal='0' />
            <column datatype='integer' name='total_deaths' ordinal='1' />
            <column datatype='real' name='DeathPercentage' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.002yqzz13sq85o17a3wcr03ubzw0' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
            <column datatype='integer' name='total_cases' ordinal='0' />
            <column datatype='integer' name='total_deaths' ordinal='1' />
            <column datatype='real' name='DeathPercentage' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:C2:no:A1:C2:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_cases]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>total_cases</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DeathPercentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DeathPercentage]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>DeathPercentage</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Death Percentage' datatype='real' name='[DeathPercentage]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[total_cases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp Probook/Desktop/tablue_alx/Sheet1 (table_1).hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='06/08/2023 01:03:01 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Sheet1 (table_1)' increment-value='%null%' refresh-type='create' rows-inserted='1' timestamp-start='2023-06-08 13:03:01.179' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>total_cases</remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_cases]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_cases</remote-alias>
              <ordinal>0</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>total_deaths</remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_deaths]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>total_deaths</remote-alias>
              <ordinal>1</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>DeathPercentage</remote-name>
              <remote-type>5</remote-type>
              <local-name>[DeathPercentage]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>DeathPercentage</remote-alias>
              <ordinal>2</ordinal>
              <family>Sheet1</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_AD8A7B5A6A6F4432B76747E1397A3357]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_AD8A7B5A6A6F4432B76747E1397A3357'>
            <properties context=''>
              <relation connection='excel-direct.002yqzz13sq85o17a3wcr03ubzw0' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
                  <column datatype='integer' name='total_cases' ordinal='0' />
                  <column datatype='integer' name='total_deaths' ordinal='1' />
                  <column datatype='real' name='DeathPercentage' ordinal='2' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Global Count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (table_1)' name='federated.1onks5i1pmfy8x10hpq9h0noya9j' />
          </datasources>
          <datasource-dependencies datasource='federated.1onks5i1pmfy8x10hpq9h0noya9j'>
            <column caption='Death Percentage' datatype='real' name='[DeathPercentage]' role='measure' type='quantitative' />
            <column-instance column='[DeathPercentage]' derivation='Sum' name='[sum:DeathPercentage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_cases]' derivation='Sum' name='[sum:total_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column caption='Total Cases' datatype='integer' name='[total_cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:DeathPercentage:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:total_cases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:total_deaths:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:total_cases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:total_deaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:DeathPercentage:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]' value='155' />
            <format attr='height' value='54' />
            <format attr='color' value='#1b1b1b' />
            <format attr='color' data-class='subtotal' scope='rows' value='#c0c0c0' />
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='normal' />
            <format attr='font-style' data-class='subtotal' value='normal' />
            <format attr='text-decoration' data-class='subtotal' value='none' />
            <format attr='font-weight' data-class='subtotal' value='bold' />
            <format attr='font-weight' data-class='subtotal' scope='rows' value='normal' />
            <format attr='text-format' field='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[Multiple Values]' value='' />
            <format attr='text-format' field='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[sum:DeathPercentage:qk]' value='n#,##0.00;-#,##0.00' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]' value='66' />
            <format attr='background-color' scope='cols' value='#00aa7f' />
            <format attr='font-weight' data-class='subtotal' value='normal' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' value='#1b1b1b' />
            <format attr='font-weight' value='bold' />
            <format attr='font-style' value='normal' />
            <format attr='text-align' value='center' />
            <format attr='font-size' value='14' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' value='#b4b4b4' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='color' value='#ffffff' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='solid' />
            <format attr='stroke-size' value='1' />
            <format attr='stroke-color' value='#1b1b1b' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.1onks5i1pmfy8x10hpq9h0noya9j].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='2' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{0F89E877-D93E-4598-A6A1-C048C725C0E8}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Total Deaths per Continent</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (table_2)' name='federated.0o3klim1et1erg10vcb261gvdnjl' />
          </datasources>
          <datasource-dependencies datasource='federated.0o3klim1et1erg10vcb261gvdnjl'>
            <column caption='Total Death Count' datatype='integer' name='[TotalDeathCount]' role='measure' type='quantitative' />
            <column caption='Continent' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[TotalDeathCount]' derivation='Sum' name='[sum:TotalDeathCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.0o3klim1et1erg10vcb261gvdnjl].[none:location:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Europe&quot;</bucket>
              <bucket>&quot;North America&quot;</bucket>
              <bucket>&quot;South America&quot;</bucket>
              <bucket>&quot;Asia&quot;</bucket>
              <bucket>&quot;Africa&quot;</bucket>
              <bucket>&quot;Oceania&quot;</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0o3klim1et1erg10vcb261gvdnjl].[none:location:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.1094474792480469' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0o3klim1et1erg10vcb261gvdnjl].[sum:TotalDeathCount:qk]</rows>
        <cols>[federated.0o3klim1et1erg10vcb261gvdnjl].[none:location:nk]</cols>
      </table>
      <simple-id uuid='{0136FBA0-1FB3-4B1A-A52E-80698EF9E684}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Percent Population Infected per Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (table_3)' name='federated.0svxgyc133zngs1bktrfo18xshq2' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0svxgyc133zngs1bktrfo18xshq2'>
            <column datatype='string' name='[Location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Percent Population Infected' datatype='real' name='[PercentPopulationInfected]' role='measure' type='quantitative' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[PercentPopulationInfected]' derivation='Sum' name='[sum:PercentPopulationInfected:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0svxgyc133zngs1bktrfo18xshq2].[Longitude (generated)]' field-type='quantitative' max='-69737736.121020854' min='-96747785.709655672' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0svxgyc133zngs1bktrfo18xshq2].[Latitude (generated)]' field-type='quantitative' max='12696082.961927949' min='-307428.64435342792' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0svxgyc133zngs1bktrfo18xshq2].[sum:PercentPopulationInfected:qk]' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='streets' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0svxgyc133zngs1bktrfo18xshq2].[none:Location:nk]' />
              <color column='[federated.0svxgyc133zngs1bktrfo18xshq2].[sum:PercentPopulationInfected:qk]' />
              <geometry column='[federated.0svxgyc133zngs1bktrfo18xshq2].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0svxgyc133zngs1bktrfo18xshq2].[Latitude (generated)]</rows>
        <cols>[federated.0svxgyc133zngs1bktrfo18xshq2].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{D0AE7D0E-C24D-4CA3-AE59-829E2BF200B0}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Percent Population Infected</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (table_4)' name='federated.152a0fa027hnju1112rxp0w03cpj' />
          </datasources>
          <datasource-dependencies datasource='federated.152a0fa027hnju1112rxp0w03cpj'>
            <column datatype='string' name='[Location]' role='dimension' type='nominal' />
            <column caption='Percent Population Infected' datatype='real' name='[PercentPopulationInfected]' role='measure' type='quantitative' />
            <column-instance column='[PercentPopulationInfected]' derivation='Avg' name='[avg:PercentPopulationInfected:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[PercentPopulationInfected]' derivation='Avg' forecast-column-base='[avg:PercentPopulationInfected:qk]' forecast-column-type='forecast-value' name='[fVal:avg:PercentPopulationInfected:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[Location]' derivation='None' name='[none:Location:nk]' pivot='key' type='nominal' />
            <column-instance column='[date]' derivation='Month-Trunc' name='[tmn:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Location:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]' />
              <text column='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]' />
              <color column='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Forecast Indicator:nk]' />
              <text column='[federated.152a0fa027hnju1112rxp0w03cpj].[fVal:avg:PercentPopulationInfected:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#f28e2b' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.152a0fa027hnju1112rxp0w03cpj].[fVal:avg:PercentPopulationInfected:qk]</rows>
        <cols>[federated.152a0fa027hnju1112rxp0w03cpj].[tmn:date:qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
      <simple-id uuid='{2C4D740F-0662-43BD-9424-D16BA5EE3276}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='46575' id='21' param='horz' type-v2='layout-flow' w='99152' x='424' y='52496'>
            <zone h='46575' id='17' param='horz' type-v2='layout-flow' w='86281' x='424' y='52496'>
              <zone h='46575' id='6' type-v2='layout-basic' w='86281' x='424' y='52496'>
                <zone h='46575' id='26' name='Sheet 4' w='86281' x='424' y='52496'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
            <zone fixed-size='243' h='46575' id='20' is-fixed='true' param='vert' type-v2='layout-flow' w='12871' x='86705' y='52496'>
              <zone fixed-size='312' h='37166' id='27' is-fixed='true' name='Sheet 4' pane-specification-id='0' param='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]&#10;[federated.152a0fa027hnju1112rxp0w03cpj].[none:Forecast Indicator:nk]' type-v2='color' w='12871' x='86705' y='52496'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone h='24535' id='18' name='Sheet 1' w='42812' x='424' y='929'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='51567' id='23' name='Sheet 3' w='49485' x='43236' y='929'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='27032' id='25' name='Sheet 2' w='42812' x='424' y='25464'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='51567' id='24' name='Sheet 3' pane-specification-id='0' param='[federated.0svxgyc133zngs1bktrfo18xshq2].[sum:PercentPopulationInfected:qk]' type-v2='color' w='6855' x='92721' y='929'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1150' minheight='1150' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='35' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98142' id='34' param='vert' type-v2='layout-flow' w='99152' x='424' y='929'>
                <zone fixed-size='189' h='24535' id='18' is-fixed='true' name='Sheet 1' w='42812' x='424' y='929'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='51567' id='23' is-fixed='true' name='Sheet 3' w='49485' x='43236' y='929'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='51567' id='24' name='Sheet 3' pane-specification-id='0' param='[federated.0svxgyc133zngs1bktrfo18xshq2].[sum:PercentPopulationInfected:qk]' type-v2='color' w='6855' x='92721' y='929'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='208' h='27032' id='25' is-fixed='true' name='Sheet 2' w='42812' x='424' y='25464'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46575' id='26' is-fixed='true' name='Sheet 4' w='86281' x='424' y='52496'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='312' h='37166' id='27' name='Sheet 4' pane-specification-id='0' param='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]&#10;[federated.152a0fa027hnju1112rxp0w03cpj].[none:Forecast Indicator:nk]' type-v2='color' w='12871' x='86705' y='52496'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{E09634E2-4634-474F-9A5A-6D23B76593FA}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' show-side-pane='false' source-height='115'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1onks5i1pmfy8x10hpq9h0noya9j].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{53AC54D2-5B28-450B-904F-2A23793B1387}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='152'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='188'>
            <card pane-specification-id='0' param='[federated.0o3klim1et1erg10vcb261gvdnjl].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o3klim1et1erg10vcb261gvdnjl].[none:location:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3B9B8A25-D901-4A44-B4C0-C56A6844FD30}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0svxgyc133zngs1bktrfo18xshq2].[sum:PercentPopulationInfected:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0svxgyc133zngs1bktrfo18xshq2].[none:Location:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
        <_.fcp.LayerControlWidget.true...layer-control toolbar-button-enabled='false' />
      </viewpoint>
      <simple-id uuid='{DC85539E-AF7F-49EA-8CF9-F2D9FE4EF857}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]&#10;[federated.152a0fa027hnju1112rxp0w03cpj].[none:Forecast Indicator:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.152a0fa027hnju1112rxp0w03cpj].[none:Forecast Indicator:nk]</field>
            <field>[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]</field>
            <field>[federated.152a0fa027hnju1112rxp0w03cpj].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F2F5E403-3FEE-459D-81C6-7A05252E05EE}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1' />
        <viewpoint name='Sheet 2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 3'>
          <zoom type='entire-view' />
          <default-map-tool-selection tool='1' />
          <_.fcp.LayerControlWidget.true...layer-control toolbar-button-enabled='false' />
        </viewpoint>
        <viewpoint name='Sheet 4'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.152a0fa027hnju1112rxp0w03cpj].[none:Forecast Indicator:nk]</field>
              <field>[federated.152a0fa027hnju1112rxp0w03cpj].[none:Location:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='25' />
      <simple-id uuid='{58C3EC50-0CC4-42D6-88BA-E796688E3F4D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='124' name='Sheet 1' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
